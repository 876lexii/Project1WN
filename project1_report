## In ET580 Project 1, I designed and implemented a WholeNumber class to handle arithmetic operations, comparisons, and number property checks using C++ object-oriented programming principles. The class has a private value member that stores an integer and includes a default constructor (WholeNumber()) that initializes it to 0 and a parameterized constructor (WholeNumber(int)) that sets it to a given value. Accessor (getValue()) and mutator (setValue(int)) functions allow controlled access to the value. I overloaded various operators to enable arithmetic (+, -, *, /, %), comparisons (==, !=, <, <=, >, >=), assignment (+=, -=, *=, /=, %=), and increment/decrement (++, --). The stream operators (<<, >>) allow input and output operations, while the subscript operator ([]) provides access to individual digits of the number. Additionally, I implemented static functions—is_prime(int), is_fibonacci(int), and is_perfect_square(int)—to check specific mathematical properties.

## To use the program, first compile it with make, then run ./prog to execute tests and interact with WholeNumber objects. Example usage includes creating instances (WholeNumber num(10);), performing operations (num1 + num2), and checking properties (WholeNumber::is_prime(7)). The project meets all specified requirements by implementing class design, operator overloading, number property checks, and testing functionality. It reinforced my understanding of C++ concepts, especially operator overloading and efficient class design. The most challenging part was implementing the subscript operator, which required careful digit extraction. Overall, this project successfully demonstrates how to encapsulate number operations within a class, making calculations intuitive and efficient.